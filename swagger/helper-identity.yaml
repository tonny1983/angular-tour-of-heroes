openapi: 3.0.1
info:
  title: Identity related API of Camunda-helper
  version: 0.0.1-SNAPSHOT
servers:
  - url: 'https://bpez.eorionsolution.com/helper/identity'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /token
          scopes:
            user: openid email
  schemas:
    UserInfo:
      title: A json object used for request body. The required properties are case by case as the api description mentioned.
      type: object
      properties:
        userId:
          type: string
          description: for the id field of user in Camunda and uid in LDAP
        surname:
          type: string
          description: for the lastName filed of user in Camunda and sn in LDAP
        givenName:
          type: string
          description: for the firstName field of user in Camunda and givenName in LDAP
        tenantName:
          type: string
          description: for the name field of tenant in Camunda
        tenantId:
          type: string
          description: for the id field of tenant in Camunda and ou of both user and group in LDAP
        userPassword:
          type: string
          description: for the userPassword field in LDAP
        email:
          type: string
          description: for the email field of user in Camunda and mail field in LDAP
        groupMame:
          type: string
          description: for the name field of group in Camunda and the cn field of group in LDAP
    AuthorizationInfo:
      title: A json object used for request body. All the properties are required.
      type: object
      properties:
        id:
          type: string
          description: userId or groupId
        resource:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 6
            - 7
            - 8
            - 9
            - 11
            - 12
          description: resource id
        permission:
          type: string
          enum:
            - 'ALL'
            - 'READ'
            - 'UPDATE'
            - 'CREATE'
            - 'DELETE'
            - 'ACCESS'
          description: permission id
    AuthorizationList:
      title: A JSON array of authorization objects
      type: object
      properties:
        id:
          type: string
          description: The id of the authorization.
        type:
          type: integer
          enum:
            - 0
            - 1
            - 2
        permissions:
          type: array
          items:
            type: string
            enum:
              - 'ALL'
              - 'READ'
              - 'UPDATE'
              - 'CREATE'
              - 'DELETE'
              - 'ACCESS'
          description: An array of Strings holding the permissions provided by this authorization.
        userId:
          type: string
          description: The id of the user this authorization has been created for. The value "*" represents a global authorization ranging over all users.
        groupId:
          type: string
          description: The id of the group this authorization has been created for.
        resourceType:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 6
            - 7
            - 8
            - 9
            - 11
            - 12
          description: An integer representing the resource type.
        resourceId:
          type: string
          description: The resource Id. The value "*" represents an authorization ranging over all instances of a resource.
    UserInfoList:
      title: A JSON array of user objects.
      type: object
      properties:
        id:
          type: string
          description: The id of the user.
        fisrtName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        email:
          type: string
          description: The email of the user.
    GroupInfoList:
      title: A JSON array of group objects.
      type: object
      properties:
        id:
          type: string
          description: The id of the group.
        name:
          type: string
          description: The name of the group.
        type:
          type: string
          description: The type of the group.
    GenericErrorInfo:
      title: Some detail error information.
      type: object
      properties:
        'type':
          type: string
          description: the name of exception class
        message:
          type: string
          description: a detailed message
security:
  - oauth2: [user]
paths:
  /user:
    get:
      summary: Returns a list of users using a list of parameters.
      description: '**NOTE: Only return the result in the same tenant of the authorized user.** Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method.'
      operationId: getUsers
      security:
        - oauth2: [user]
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Filter by the id of the user.
          required: false
        - in: query
          name: firstName
          schema:
            type: string
          description: Filter by the first name of the user.
          required: false
        - in: query
          name: firstNameLike
          schema:
            type: string
          description: Filter by the first name that the parameter is a substring of.
          required: false
        - in: query
          name: lastName
          schema:
            type: string
          description: Filter by the last name of the user.
          required: false
        - in: query
          name: lastNameLike
          schema:
            type: string
          description: Filter by the last name that the parameter is a substring of.
          required: false
        - in: query
          name: email
          schema:
            type: string
          description: Filter by the email of the user.
          required: false
        - in: query
          name: emailLike
          schema:
            type: string
          description: Filter by the email that the parameter is a substring of.
          required: false
        - in: query
          name: memberOfGroup
          schema:
            type: string
          description: Filter for users which are members of a group.
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - 'userId'
              - 'firstName'
              - 'lastName'
              - 'email'
            default: 'userId'
          description: Sort the results by a given criterion. Valid values are instanceId, definitionId, definitionKey, definitionName, definitionVersion, businessKey, startTime, endTime, duration and tenantId. Must be used in conjunction with the sortOrder parameter.
          required: false
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - 'desc'
              - 'asc'
            default: 'desc'
          description: Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
          required: false
        - in: query
          name: firstResult
          schema:
            type: integer
          description: Pagination of results. Specifies the index of the first result to return.
          required: false
        - in: query
          name: maxResults
          schema:
            type: integer
          description: Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
          required: false
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoList'
        400:
          description: Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
    put:
      summary: Create a new user
      description: '**NOTE: The new user will be created in the same tenant of the authorization user.**'
      operationId: createUser
      security:
        - oauth2: [user]
      requestBody:
        description: 'The following properties are required. However, there is no check for it in the application, instead using null for all missing properties.

                           * userId

                           * surname

                           * givenName

                           * userPassword

                           * email'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        201:
          description: Object Create
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
  /group:
    get:
      summary: Returns a list of groups using a list of parameters.
      description: '**NOTE: Only return the result in the same tenant of the authorized user.** Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count method.'
      operationId: getGroups
      security:
        - oauth2: [user]
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Filter by the id of the group.
          required: false
        - in: query
          name: name
          schema:
            type: string
          description: Filter by the name of the group.
          required: false
        - in: query
          name: nameLike
          schema:
            type: string
          description: Filter by the name that the parameter is a substring of.
          required: false
        - in: query
          name: type
          schema:
            type: string
          description: Filter by the type of the group.
          required: false
        - in: query
          name: member
          schema:
            type: string
          description: Only retrieve groups which the given user id is a member of.
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - 'id'
              - 'name'
              - 'type'
            default: 'id'
          description: Sort the results lexicographically by a given criterion. Valid values are id, name and type. Must be used in conjunction with the sortOrder parameter.
          required: false
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - 'desc'
              - 'asc'
            default: 'desc'
          description: Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
          required: false
        - in: query
          name: firstResult
          schema:
            type: integer
          description: Pagination of results. Specifies the index of the first result to return.
          required: false
        - in: query
          name: maxResults
          schema:
            type: integer
          description: Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
          required: false
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupInfoList'
        400:
          description: Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
    put:
      summary: Create a new group
      description: '**NOTE: The new group will be created in the same tenant of the authorization user.**'
      operationId: createGroup
      security:
        - oauth2: [user]
      requestBody:
        description: 'The following properties are required. However, there is no check for it in the application, instead using null for all missing properties.

                           * groupName'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        201:
          description: Object Create
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
  /assign/{userId}/to/{groupId}:
    post:
      summary: Assign a new to a group
      operationId: assignUserToGroup
      security:
        - oauth2: [user]
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: user id
        - in: path
          name: groupId
          schema:
            type: string
          required: true
          description: group id
      responses:
        201:
          description: Create
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
  /user/authorization:
    get:
      summary: Get user's authorization
      operationId: getUserAuthorization
      security:
        - oauth2: [user]
      parameters:
        - in: query
          name: userIdIn
          schema:
            type: string
          required: true
          description: Filter by a comma-separated list of userIds.
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - 'resourceType'
          required: false
          description: Sort the results lexicographically by a given criterion. Valid values are resourceType. Must be used in conjunction with the sortOrder parameter.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - 'asc'
              - 'desc'
            description: 'desc'
          required: false
          description: Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
        - in: query
          name: firstResult
          schema:
            type: integer
            minimum: 0
          required: false
          description: Pagination of results. Specifies the index of the first result to return.
        - in: query
          name: maxResults
          schema:
            type: integer
            minimum: 1
          required: false
          description: Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
      responses:
        200:
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                description: >
                  ResourceType definition:
                    * `1` - User
                    * `2` - Group
                    * `3` - Group Member
                    * `4` - Authorization
                    * `6` - Process Definition
                    * `7` - Task
                    * `8` - Process Instance
                    * `9` - Deployment
                    * `11` - Tenant
                    * `12` - Tenant Membership
                items:
                  $ref: '#/components/schemas/AuthorizationList'
        400:
          description: Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
    put:
      summary: Create authorizations of a user
      operationId: createAuthorizationsForUser
      security:
        - oauth2: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuthorizationInfo'
      responses:
        201:
          description: Created
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
    delete:
      summary: Revoke authorizations of a user
      operationId: revokeAuthorizationsForUser
      security:
        - oauth2: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuthorizationInfo'
      responses:
        202:
          description: Accepted
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
  /group/authorization:
    get:
      summary: Get group's authorization
      operationId: getGroupAuthorization
      security:
        - oauth2: [user]
      parameters:
        - in: query
          name: groupIdIn
          schema:
            type: string
          required: true
          description: Filter by a comma-separated list of userIds.
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - 'resourceType'
          required: false
          description: Sort the results lexicographically by a given criterion. Valid values are resourceType. Must be used in conjunction with the sortOrder parameter.
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - 'asc'
              - 'desc'
            description: 'desc'
          required: false
          description: Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
        - in: query
          name: firstResult
          schema:
            type: integer
            minimum: 0
          required: false
          description: Pagination of results. Specifies the index of the first result to return.
        - in: query
          name: maxResults
          schema:
            type: integer
            minimum: 1
          required: false
          description: Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
      responses:
        200:
          description: Request successful.
          content:
            application/json:
              schema:
                type: array
                description: >
                  ResourceType definition:
                    * `1` - User
                    * `2` - Group
                    * `3` - Group Member
                    * `4` - Authorization
                    * `6` - Process Definition
                    * `7` - Task
                    * `8` - Process Instance
                    * `9` - Deployment
                    * `11` - Tenant
                    * `12` - Tenant Membership
                items:
                  $ref: '#/components/schemas/AuthorizationList'
        400:
          description: Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy is specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
    put:
      summary: Create authorizations of a group
      operationId: createAuthorizationsForGroup
      security:
        - oauth2: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuthorizationInfo'
      responses:
        201:
          description: Created
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
    delete:
      summary: Revoke authorizations of a group
      operationId: revokeAuthorizationsForGroup
      security:
        - oauth2: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuthorizationInfo'
      responses:
        202:
          description: Accepted
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
        500:
          description: Error
          content:
            application/json:
              schema:
                type: object
