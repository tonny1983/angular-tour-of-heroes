openapi: 3.0.1
info:
  title: Task related API (runtime)
  version: "7.11"
servers:
  - url: 'https://bpez.eorionsolution.com/engine-rest'
paths:
  /task:
    get:
      summary: Returns a list of Task.
      description: Queries for tasks that fulfill a given filter. The size of the
        result set can be retrieved by using the Get Task Count method.
      parameters:
        - name: processInstanceIds
          in: query
          description: Filter by a comma-separated list of process instance ids.
          schema:
            type: string
        - name: processInstanceBusinessKey
          in: query
          description: Filter by process instance business key.
          schema:
            type: string
        - name: assignee
          in: query
          description: Restrict to tasks that the given user is assigned to.
          schema:
            type: string
        - name: candidateUser
          in: query
          description: Only include tasks that are offered to the given user or to one
            of his groups.
          schema:
            type: string
        - in: query
          name: dueBefore
          schema:
            type: string
            format: 'date-time'
          description: Restrict to tasks that are due before the given date. By default*, the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.754+0200.
          required: false
        - in: query
          name: active
          schema:
            type: boolean
            default: true
          description: Only include active tasks. Value may only be true, as false is the default behavior.
          required: true
        - name: sortBy
          in: query
          description: Sort the results lexicographically by a given criterion. Valid
            values are instanceId, caseInstanceId, dueDate, executionId, caseExecutionId,assignee,
            created, description, id, name, nameCaseInsensitive and priority. Must be
            used in conjunction with the sortOrder parameter.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort the results in a given order. Values may be asc for ascending
            order or desc for descending order. Must be used in conjunction with the
            sortBy parameter.
          schema:
            type: string
            enum:
              - 'desc'
              - 'asc'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          description: Returned if some of the query parameters are invalid, for example
            if a sortOrder parameter is supplied, but no sortBy, or if an invalid
            operator for variable comparison is used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
  /task/count:
    get:
      summary: Returns the number of tasks that fulfill a provided filter.
      description: Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the Get Tasks method.
      parameters:
        - in: query
          name: candidateUser
          schema:
            type: string
          description: Only include tasks that are offered to the given user or to one of his groups.
          required: false
        - in: query
          name: assignee
          schema:
            type: string
          description: Restrict to tasks that the given user is assigned to.
          required: false
        - in: query
          name: dueBefore
          schema:
            type: string
            format: 'date-time'
          description: Restrict to tasks that are due before the given date. By default*, the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.754+0200.
          required: false
        - in: query
          name: active
          schema:
            type: boolean
            default: true
          description: Only include active tasks. Value may only be true, as false is the default behavior.
          required: true
      responses:
        '200':
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountInfo'
        '400':
          description: Returned if some of the query parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
  /task/{id}/claim:
    post:
      summary: Claims a task for a specific user.
      description: The difference with the Set Assignee method is that here a check is performed to see if the task already has a user assigned to it.
      operationId: claimTask
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: The id of the task to claim.
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The id of the user that claims the task.
      responses:
        204:
          description: Request successful.
        500:
          description: Task with given id does not exist or claiming was not successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
  /task/{id}/submit-form:
    post:
      summary: Completes a task and updates process variables using a form submit.
      description: 'There are two difference between this method and the complete method:

        + If the task is in state PENDING - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed.

        + If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined.'
      operationId: completeTaskWithForm
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: The id of the task to claim.
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variables:
                  $ref: '#/components/schemas/FormVariable'
      responses:
        204:
          description: Request successful.
        400:
          description: The variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
        500:
          description: Task with given id does not exist or claiming was not successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorInfo'
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          description: The task id.
        name:
          type: string
          description: The task name.
        assignee:
          type: string
          description: The assignee's id.
        created:
          type: string
          description: The date the task was created on. Default format* yyyy-MM-dd'T'HH:mm:ss.SSSZ.
          format: date-time
        due:
          type: string
          description: The task's due date. Default format* yyyy-MM-dd'T'HH:mm:ss.SSSZ.
          format: date-time
        followUp:
          type: string
          description: The follow-up date for the task. Default format* yyyy-MM-dd'T'HH:mm:ss.SSSZ.
          format: date-time
        delegationState:
          type: string
          description: The task's delegation state. Possible values are PENDING and
            RESOLVED.
          enum:
            - PENDING
            - RESOLVED
        description:
          type: string
          description: The task's description.
        executionId:
          type: string
          description: The id of the execution the task belongs to.
        owner:
          type: string
          description: The owner's id.
        parentTaskId:
          type: string
          description: The id the parent task, if this task is a subtask.
        priority:
          type: integer
          description: The task's priority.
          format: int32
        processDefinitionId:
          type: string
          description: The id of the process definition the task belongs to.
        processInstanceId:
          type: string
          description: The id of the process instance the task belongs to.
        caseDefinitionId:
          type: string
          description: The id of the case definition the task belongs to.
        caseInstanceId:
          type: string
          description: The id of the case instance the task belongs to.
        caseExecutionId:
          type: string
          description: The id of the case execution the task belongs to.
        taskDefinitionKey:
          type: string
          description: The task's key.
        suspended:
          type: boolean
          description: Whether the task belongs to a process instance that is suspended.
        formKey:
          type: string
          description: If not null, the form key for the task.
        tenantId:
          type: string
          description: If not null, the tenant id of the task.
    GenericErrorInfo:
      title: Some detail error information.
      type: object
      properties:
        'type':
          type: string
          description: the name of exception class
        message:
          type: string
          description: a detailed message
    CountInfo:
      title: Result object for all count APIs.
      type: object
      properties:
        count:
          type: integer
          minimum: 0
          description: the count number
    FormVariable:
      title: A JSON object containing a property for each variable returned.
      description: The key is the variable name, the value is a JSON object. For detail, pls refer to the (docs)[https://docs.camunda.org/manual/7.11/reference/rest/process-definition/get-form-variables/#result].
      type: object
